--------------------------------------------------------------------------------
--  File:       pcomp_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity pcomp_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    START       : out std_logic_vector(31 downto 0);
    START_WSTB  : out std_logic;
    STEP       : out std_logic_vector(31 downto 0);
    STEP_WSTB  : out std_logic;
    WIDTH       : out std_logic_vector(31 downto 0);
    WIDTH_WSTB  : out std_logic;
    PNUM       : out std_logic_vector(31 downto 0);
    PNUM_WSTB  : out std_logic;
    RELATIVE       : out std_logic_vector(31 downto 0);
    RELATIVE_WSTB  : out std_logic;
    DIR       : out std_logic_vector(31 downto 0);
    DIR_WSTB  : out std_logic;
    DELTAP       : out std_logic_vector(31 downto 0);
    DELTAP_WSTB  : out std_logic;
    USE_TABLE       : out std_logic_vector(31 downto 0);
    USE_TABLE_WSTB  : out std_logic;
    ERROR       : in  std_logic_vector(31 downto 0);
    TABLE_ADDRESS       : out std_logic_vector(31 downto 0);
    TABLE_ADDRESS_WSTB  : out std_logic;
    TABLE_LENGTH       : out std_logic_vector(31 downto 0);
    TABLE_LENGTH_WSTB  : out std_logic;
    TABLE_STATUS       : in  std_logic_vector(31 downto 0);
    enable_o : out std_logic;
    inp_o : out std_logic_vector(31 downto 0);
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end pcomp_ctrl;

architecture rtl of pcomp_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;
signal INP      : std_logic_vector(31 downto 0);
signal INP_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            START <= (others => '0');
            START_WSTB <= '0';
            STEP <= (others => '0');
            STEP_WSTB <= '0';
            WIDTH <= (others => '0');
            WIDTH_WSTB <= '0';
            PNUM <= (others => '0');
            PNUM_WSTB <= '0';
            RELATIVE <= (others => '0');
            RELATIVE_WSTB <= '0';
            DIR <= (others => '0');
            DIR_WSTB <= '0';
            DELTAP <= (others => '0');
            DELTAP_WSTB <= '0';
            USE_TABLE <= (others => '0');
            USE_TABLE_WSTB <= '0';
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            INP <= (others => '0');
            INP_WSTB <= '0';
            TABLE_ADDRESS <= (others => '0');
            TABLE_ADDRESS_WSTB <= '0';
            TABLE_LENGTH <= (others => '0');
            TABLE_LENGTH_WSTB <= '0';
        else
            START_WSTB <= '0';
            STEP_WSTB <= '0';
            WIDTH_WSTB <= '0';
            PNUM_WSTB <= '0';
            RELATIVE_WSTB <= '0';
            DIR_WSTB <= '0';
            DELTAP_WSTB <= '0';
            USE_TABLE_WSTB <= '0';
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            INP_WSTB <= '0';
            TABLE_ADDRESS_WSTB <= '0';
            TABLE_LENGTH_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = PCOMP_START) then
                    START <= write_data_i;
                    START_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_STEP) then
                    STEP <= write_data_i;
                    STEP_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_WIDTH) then
                    WIDTH <= write_data_i;
                    WIDTH_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_PNUM) then
                    PNUM <= write_data_i;
                    PNUM_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_RELATIVE) then
                    RELATIVE <= write_data_i;
                    RELATIVE_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_DIR) then
                    DIR <= write_data_i;
                    DIR_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_DELTAP) then
                    DELTAP <= write_data_i;
                    DELTAP_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_USE_TABLE) then
                    USE_TABLE <= write_data_i;
                    USE_TABLE_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_ENABLE) then
                    ENABLE <= write_data_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_ENABLE_DLY) then
                    ENABLE_DLY <= write_data_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_INP) then
                    INP <= write_data_i;
                    INP_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_TABLE_ADDRESS) then
                    TABLE_ADDRESS <= write_data_i;
                    TABLE_ADDRESS_WSTB <= '1';
                end if;
                if (write_addr = PCOMP_TABLE_LENGTH) then
                    TABLE_LENGTH <= write_data_i;
                    TABLE_LENGTH_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when PCOMP_ERROR =>
                    read_data_o <= ERROR;
                when PCOMP_TABLE_STATUS =>
                    read_data_o <= TABLE_STATUS;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);



posmux_INP : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => inp_o,
    POSMUX_SEL  => INP,
    POS_DLY     => (others => '0') --INP_DLY
);

end rtl;