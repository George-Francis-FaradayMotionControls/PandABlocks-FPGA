--------------------------------------------------------------------------------
--  File:       inenc_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity inenc_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    PROTOCOL       : out std_logic_vector(31 downto 0);
    PROTOCOL_WSTB  : out std_logic;
    BYPASS       : out std_logic_vector(31 downto 0);
    BYPASS_WSTB  : out std_logic;
    CLK_PERIOD       : out std_logic_vector(31 downto 0);
    CLK_PERIOD_WSTB  : out std_logic;
    FRAME_PERIOD       : out std_logic_vector(31 downto 0);
    FRAME_PERIOD_WSTB  : out std_logic;
    BITS       : out std_logic_vector(31 downto 0);
    BITS_WSTB  : out std_logic;
    SETP       : out std_logic_vector(31 downto 0);
    SETP_WSTB  : out std_logic;
    RST_ON_Z       : out std_logic_vector(31 downto 0);
    RST_ON_Z_WSTB  : out std_logic;
    STATUS       : in  std_logic_vector(31 downto 0);
    DCARD_MODE       : in  std_logic_vector(31 downto 0);
    clk_o : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end inenc_ctrl;

architecture rtl of inenc_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal CLK      : std_logic_vector(31 downto 0);
signal CLK_WSTB : std_logic;
signal CLK_DLY      : std_logic_vector(31 downto 0);
signal CLK_DLY_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            PROTOCOL <= (others => '0');
            PROTOCOL_WSTB <= '0';
            BYPASS <= (others => '0');
            BYPASS_WSTB <= '0';
            CLK_PERIOD <= (others => '0');
            CLK_PERIOD_WSTB <= '0';
            FRAME_PERIOD <= (others => '0');
            FRAME_PERIOD_WSTB <= '0';
            BITS <= (others => '0');
            BITS_WSTB <= '0';
            SETP <= (others => '0');
            SETP_WSTB <= '0';
            RST_ON_Z <= (others => '0');
            RST_ON_Z_WSTB <= '0';
            CLK <= (others => '0');
            CLK_WSTB <= '0';
            CLK_DLY <= (others => '0');
            CLK_DLY_WSTB <= '0';
        else
            PROTOCOL_WSTB <= '0';
            BYPASS_WSTB <= '0';
            CLK_PERIOD_WSTB <= '0';
            FRAME_PERIOD_WSTB <= '0';
            BITS_WSTB <= '0';
            SETP_WSTB <= '0';
            RST_ON_Z_WSTB <= '0';
            CLK_WSTB <= '0';
            CLK_DLY_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = INENC_PROTOCOL) then
                    PROTOCOL <= write_data_i;
                    PROTOCOL_WSTB <= '1';
                end if;
                if (write_addr = INENC_BYPASS) then
                    BYPASS <= write_data_i;
                    BYPASS_WSTB <= '1';
                end if;
                if (write_addr = INENC_CLK_PERIOD) then
                    CLK_PERIOD <= write_data_i;
                    CLK_PERIOD_WSTB <= '1';
                end if;
                if (write_addr = INENC_FRAME_PERIOD) then
                    FRAME_PERIOD <= write_data_i;
                    FRAME_PERIOD_WSTB <= '1';
                end if;
                if (write_addr = INENC_BITS) then
                    BITS <= write_data_i;
                    BITS_WSTB <= '1';
                end if;
                if (write_addr = INENC_SETP) then
                    SETP <= write_data_i;
                    SETP_WSTB <= '1';
                end if;
                if (write_addr = INENC_RST_ON_Z) then
                    RST_ON_Z <= write_data_i;
                    RST_ON_Z_WSTB <= '1';
                end if;
                if (write_addr = INENC_CLK) then
                    CLK <= write_data_i;
                    CLK_WSTB <= '1';
                end if;
                if (write_addr = INENC_CLK_DLY) then
                    CLK_DLY <= write_data_i;
                    CLK_DLY_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when INENC_STATUS =>
                    read_data_o <= STATUS;
                when INENC_DCARD_MODE =>
                    read_data_o <= DCARD_MODE;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_CLK : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => clk_o,
    BITMUX_SEL  => CLK,
    BIT_DLY     => CLK_DLY
);




end rtl;