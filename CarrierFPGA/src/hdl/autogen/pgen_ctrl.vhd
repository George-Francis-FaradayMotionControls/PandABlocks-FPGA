--------------------------------------------------------------------------------
--  File:       pgen_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity pgen_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    CYCLES       : out std_logic_vector(31 downto 0);
    CYCLES_WSTB  : out std_logic;
    TABLE_ADDRESS       : out std_logic_vector(31 downto 0);
    TABLE_ADDRESS_WSTB  : out std_logic;
    TABLE_LENGTH       : out std_logic_vector(31 downto 0);
    TABLE_LENGTH_WSTB  : out std_logic;
    TABLE_STATUS       : in  std_logic_vector(31 downto 0);
    enable_o : out std_logic;
    trig_o : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end pgen_ctrl;

architecture rtl of pgen_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;
signal TRIG      : std_logic_vector(31 downto 0);
signal TRIG_WSTB : std_logic;
signal TRIG_DLY      : std_logic_vector(31 downto 0);
signal TRIG_DLY_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            CYCLES <= (others => '0');
            CYCLES_WSTB <= '0';
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            TRIG <= (others => '0');
            TRIG_WSTB <= '0';
            TRIG_DLY <= (others => '0');
            TRIG_DLY_WSTB <= '0';
            TABLE_ADDRESS <= (others => '0');
            TABLE_ADDRESS_WSTB <= '0';
            TABLE_LENGTH <= (others => '0');
            TABLE_LENGTH_WSTB <= '0';
        else
            CYCLES_WSTB <= '0';
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            TRIG_WSTB <= '0';
            TRIG_DLY_WSTB <= '0';
            TABLE_ADDRESS_WSTB <= '0';
            TABLE_LENGTH_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = PGEN_CYCLES) then
                    CYCLES <= write_data_i;
                    CYCLES_WSTB <= '1';
                end if;
                if (write_addr = PGEN_ENABLE) then
                    ENABLE <= write_data_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (write_addr = PGEN_ENABLE_DLY) then
                    ENABLE_DLY <= write_data_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (write_addr = PGEN_TRIG) then
                    TRIG <= write_data_i;
                    TRIG_WSTB <= '1';
                end if;
                if (write_addr = PGEN_TRIG_DLY) then
                    TRIG_DLY <= write_data_i;
                    TRIG_DLY_WSTB <= '1';
                end if;
                if (write_addr = PGEN_TABLE_ADDRESS) then
                    TABLE_ADDRESS <= write_data_i;
                    TABLE_ADDRESS_WSTB <= '1';
                end if;
                if (write_addr = PGEN_TABLE_LENGTH) then
                    TABLE_LENGTH <= write_data_i;
                    TABLE_LENGTH_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when PGEN_TABLE_STATUS =>
                    read_data_o <= TABLE_STATUS;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);

bitmux_TRIG : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => trig_o,
    BITMUX_SEL  => TRIG,
    BIT_DLY     => TRIG_DLY
);




end rtl;