--------------------------------------------------------------------------------
--  File:       slow_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity slow_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    TEMP1_VAL       : in  std_logic_vector(31 downto 0);
    TEMP2_VAL       : in  std_logic_vector(31 downto 0);
    TEMP3_VAL       : in  std_logic_vector(31 downto 0);
    TEMP4_VAL       : in  std_logic_vector(31 downto 0);
    TEMP5_VAL       : in  std_logic_vector(31 downto 0);
    FMC_12V       : in  std_logic_vector(31 downto 0);
    ENC_24V       : in  std_logic_vector(31 downto 0);
    FMC_15VP       : in  std_logic_vector(31 downto 0);
    FMC_15VN       : in  std_logic_vector(31 downto 0);
    SFP_3V3       : in  std_logic_vector(31 downto 0);
    IO_5V0       : in  std_logic_vector(31 downto 0);
    PICO_5V0       : in  std_logic_vector(31 downto 0);
    ALIM_12V0       : in  std_logic_vector(31 downto 0);
    -- Memory Bus Interface
    mem_cs_i            : in  std_logic;
    mem_wstb_i          : in  std_logic;
    mem_addr_i          : in  std_logic_vector(BLK_AW-1 downto 0);
    mem_dat_i           : in  std_logic_vector(31 downto 0);
    mem_dat_o           : out std_logic_vector(31 downto 0)
);
end slow_ctrl;

architecture rtl of slow_ctrl is

signal mem_addr : natural range 0 to (2**mem_addr_i'length - 1);


begin

mem_addr <= to_integer(unsigned(mem_addr_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
        else

            if (mem_cs_i = '1' and mem_wstb_i = '1') then
                -- Input Select Control Registers

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            mem_dat_o <= (others => '0');
        else
            case (mem_addr) is
                when SLOW_TEMP1_VAL =>
                    mem_dat_o <= TEMP1_VAL;
                when SLOW_TEMP2_VAL =>
                    mem_dat_o <= TEMP2_VAL;
                when SLOW_TEMP3_VAL =>
                    mem_dat_o <= TEMP3_VAL;
                when SLOW_TEMP4_VAL =>
                    mem_dat_o <= TEMP4_VAL;
                when SLOW_TEMP5_VAL =>
                    mem_dat_o <= TEMP5_VAL;
                when SLOW_FMC_12V =>
                    mem_dat_o <= FMC_12V;
                when SLOW_ENC_24V =>
                    mem_dat_o <= ENC_24V;
                when SLOW_FMC_15VP =>
                    mem_dat_o <= FMC_15VP;
                when SLOW_FMC_15VN =>
                    mem_dat_o <= FMC_15VN;
                when SLOW_SFP_3V3 =>
                    mem_dat_o <= SFP_3V3;
                when SLOW_IO_5V0 =>
                    mem_dat_o <= IO_5V0;
                when SLOW_PICO_5V0 =>
                    mem_dat_o <= PICO_5V0;
                when SLOW_ALIM_12V0 =>
                    mem_dat_o <= ALIM_12V0;
                when others =>
                    mem_dat_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--



end rtl;