--------------------------------------------------------------------------------
--  File:       adder_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity adder_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    INPA_INVERT       : out std_logic_vector(31 downto 0);
    INPA_INVERT_WSTB  : out std_logic;
    INPB_INVERT       : out std_logic_vector(31 downto 0);
    INPB_INVERT_WSTB  : out std_logic;
    INPC_INVERT       : out std_logic_vector(31 downto 0);
    INPC_INVERT_WSTB  : out std_logic;
    INPD_INVERT       : out std_logic_vector(31 downto 0);
    INPD_INVERT_WSTB  : out std_logic;
    SCALE       : out std_logic_vector(31 downto 0);
    SCALE_WSTB  : out std_logic;
    inpa_o : out std_logic_vector(31 downto 0);
    inpb_o : out std_logic_vector(31 downto 0);
    inpc_o : out std_logic_vector(31 downto 0);
    inpd_o : out std_logic_vector(31 downto 0);
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end adder_ctrl;

architecture rtl of adder_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal INPA      : std_logic_vector(31 downto 0);
signal INPA_WSTB : std_logic;
signal INPB      : std_logic_vector(31 downto 0);
signal INPB_WSTB : std_logic;
signal INPC      : std_logic_vector(31 downto 0);
signal INPC_WSTB : std_logic;
signal INPD      : std_logic_vector(31 downto 0);
signal INPD_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            INPA <= (others => '0');
            INPA_WSTB <= '0';
            INPB <= (others => '0');
            INPB_WSTB <= '0';
            INPC <= (others => '0');
            INPC_WSTB <= '0';
            INPD <= (others => '0');
            INPD_WSTB <= '0';
            INPA_INVERT <= (others => '0');
            INPA_INVERT_WSTB <= '0';
            INPB_INVERT <= (others => '0');
            INPB_INVERT_WSTB <= '0';
            INPC_INVERT <= (others => '0');
            INPC_INVERT_WSTB <= '0';
            INPD_INVERT <= (others => '0');
            INPD_INVERT_WSTB <= '0';
            SCALE <= (others => '0');
            SCALE_WSTB <= '0';
        else
            INPA_WSTB <= '0';
            INPB_WSTB <= '0';
            INPC_WSTB <= '0';
            INPD_WSTB <= '0';
            INPA_INVERT_WSTB <= '0';
            INPB_INVERT_WSTB <= '0';
            INPC_INVERT_WSTB <= '0';
            INPD_INVERT_WSTB <= '0';
            SCALE_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = ADDER_INPA) then
                    INPA <= write_data_i;
                    INPA_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPB) then
                    INPB <= write_data_i;
                    INPB_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPC) then
                    INPC <= write_data_i;
                    INPC_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPD) then
                    INPD <= write_data_i;
                    INPD_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPA_INVERT) then
                    INPA_INVERT <= write_data_i;
                    INPA_INVERT_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPB_INVERT) then
                    INPB_INVERT <= write_data_i;
                    INPB_INVERT_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPC_INVERT) then
                    INPC_INVERT <= write_data_i;
                    INPC_INVERT_WSTB <= '1';
                end if;
                if (write_addr = ADDER_INPD_INVERT) then
                    INPD_INVERT <= write_data_i;
                    INPD_INVERT_WSTB <= '1';
                end if;
                if (write_addr = ADDER_SCALE) then
                    SCALE <= write_data_i;
                    SCALE_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--


posmux_INPA : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => inpa_o,
    POSMUX_SEL  => INPA,
    POS_DLY     => (others => '0') --INPA_DLY
);
posmux_INPB : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => inpb_o,
    POSMUX_SEL  => INPB,
    POS_DLY     => (others => '0') --INPB_DLY
);
posmux_INPC : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => inpc_o,
    POSMUX_SEL  => INPC,
    POS_DLY     => (others => '0') --INPC_DLY
);
posmux_INPD : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => inpd_o,
    POSMUX_SEL  => INPD,
    POS_DLY     => (others => '0') --INPD_DLY
);

end rtl;