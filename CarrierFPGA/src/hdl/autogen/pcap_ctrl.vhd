--------------------------------------------------------------------------------
--  File:       pcap_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity pcap_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    FRAME_NUM       : out std_logic_vector(31 downto 0);
    FRAME_NUM_WSTB  : out std_logic;
    ERR_STATUS       : in  std_logic_vector(31 downto 0);
    FRAME_COUNT       : in  std_logic_vector(31 downto 0);
    enable_o : out std_logic;
    frame_o : out std_logic;
    capture_o : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end pcap_ctrl;

architecture rtl of pcap_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;
signal FRAME      : std_logic_vector(31 downto 0);
signal FRAME_WSTB : std_logic;
signal FRAME_DLY      : std_logic_vector(31 downto 0);
signal FRAME_DLY_WSTB : std_logic;
signal CAPTURE      : std_logic_vector(31 downto 0);
signal CAPTURE_WSTB : std_logic;
signal CAPTURE_DLY      : std_logic_vector(31 downto 0);
signal CAPTURE_DLY_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            FRAME <= (others => '0');
            FRAME_WSTB <= '0';
            FRAME_DLY <= (others => '0');
            FRAME_DLY_WSTB <= '0';
            CAPTURE <= (others => '0');
            CAPTURE_WSTB <= '0';
            CAPTURE_DLY <= (others => '0');
            CAPTURE_DLY_WSTB <= '0';
            FRAME_NUM <= (others => '0');
            FRAME_NUM_WSTB <= '0';
        else
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            FRAME_WSTB <= '0';
            FRAME_DLY_WSTB <= '0';
            CAPTURE_WSTB <= '0';
            CAPTURE_DLY_WSTB <= '0';
            FRAME_NUM_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = PCAP_ENABLE) then
                    ENABLE <= write_data_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (write_addr = PCAP_ENABLE_DLY) then
                    ENABLE_DLY <= write_data_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (write_addr = PCAP_FRAME) then
                    FRAME <= write_data_i;
                    FRAME_WSTB <= '1';
                end if;
                if (write_addr = PCAP_FRAME_DLY) then
                    FRAME_DLY <= write_data_i;
                    FRAME_DLY_WSTB <= '1';
                end if;
                if (write_addr = PCAP_CAPTURE) then
                    CAPTURE <= write_data_i;
                    CAPTURE_WSTB <= '1';
                end if;
                if (write_addr = PCAP_CAPTURE_DLY) then
                    CAPTURE_DLY <= write_data_i;
                    CAPTURE_DLY_WSTB <= '1';
                end if;
                if (write_addr = PCAP_FRAME_NUM) then
                    FRAME_NUM <= write_data_i;
                    FRAME_NUM_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when PCAP_ERR_STATUS =>
                    read_data_o <= ERR_STATUS;
                when PCAP_FRAME_COUNT =>
                    read_data_o <= FRAME_COUNT;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);

bitmux_FRAME : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => frame_o,
    BITMUX_SEL  => FRAME,
    BIT_DLY     => FRAME_DLY
);

bitmux_CAPTURE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => capture_o,
    BITMUX_SEL  => CAPTURE,
    BIT_DLY     => CAPTURE_DLY
);




end rtl;