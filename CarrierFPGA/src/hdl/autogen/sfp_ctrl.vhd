--------------------------------------------------------------------------------
--  File:       sfp_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity sfp_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    LINK1_UP       : in  std_logic_vector(31 downto 0);
    ERROR1_COUNT       : in  std_logic_vector(31 downto 0);
    LINK2_UP       : in  std_logic_vector(31 downto 0);
    ERROR2_COUNT       : in  std_logic_vector(31 downto 0);
    LINK3_UP       : in  std_logic_vector(31 downto 0);
    ERROR3_COUNT       : in  std_logic_vector(31 downto 0);
    SFP_CLK1       : in  std_logic_vector(31 downto 0);
    SFP_CLK2       : in  std_logic_vector(31 downto 0);
    SFP_CLK3       : in  std_logic_vector(31 downto 0);
    SOFT_RESET       : out std_logic_vector(31 downto 0);
    SOFT_RESET_WSTB  : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end sfp_ctrl;

architecture rtl of sfp_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);


begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            SOFT_RESET <= (others => '0');
            SOFT_RESET_WSTB <= '0';
        else
            SOFT_RESET_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = SFP_SOFT_RESET) then
                    SOFT_RESET <= write_data_i;
                    SOFT_RESET_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when SFP_LINK1_UP =>
                    read_data_o <= LINK1_UP;
                when SFP_ERROR1_COUNT =>
                    read_data_o <= ERROR1_COUNT;
                when SFP_LINK2_UP =>
                    read_data_o <= LINK2_UP;
                when SFP_ERROR2_COUNT =>
                    read_data_o <= ERROR2_COUNT;
                when SFP_LINK3_UP =>
                    read_data_o <= LINK3_UP;
                when SFP_ERROR3_COUNT =>
                    read_data_o <= ERROR3_COUNT;
                when SFP_SFP_CLK1 =>
                    read_data_o <= SFP_CLK1;
                when SFP_SFP_CLK2 =>
                    read_data_o <= SFP_CLK2;
                when SFP_SFP_CLK3 =>
                    read_data_o <= SFP_CLK3;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--



end rtl;