--------------------------------------------------------------------------------
--  File:       fmc_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity fmc_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    PRESENT       : in  std_logic_vector(31 downto 0);
    ADC1_GAIN       : out std_logic_vector(31 downto 0);
    ADC1_GAIN_WSTB  : out std_logic;
    ADC2_GAIN       : out std_logic_vector(31 downto 0);
    ADC2_GAIN_WSTB  : out std_logic;
    ADC3_GAIN       : out std_logic_vector(31 downto 0);
    ADC3_GAIN_WSTB  : out std_logic;
    ADC4_GAIN       : out std_logic_vector(31 downto 0);
    ADC4_GAIN_WSTB  : out std_logic;
    enable_o : out std_logic;
    -- Memory Bus Interface
    mem_cs_i            : in  std_logic;
    mem_wstb_i          : in  std_logic;
    mem_addr_i          : in  std_logic_vector(BLK_AW-1 downto 0);
    mem_dat_i           : in  std_logic_vector(31 downto 0);
    mem_dat_o           : out std_logic_vector(31 downto 0)
);
end fmc_ctrl;

architecture rtl of fmc_ctrl is

signal mem_addr : natural range 0 to (2**mem_addr_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;

begin

mem_addr <= to_integer(unsigned(mem_addr_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            ADC1_GAIN <= (others => '0');
            ADC1_GAIN_WSTB <= '0';
            ADC2_GAIN <= (others => '0');
            ADC2_GAIN_WSTB <= '0';
            ADC3_GAIN <= (others => '0');
            ADC3_GAIN_WSTB <= '0';
            ADC4_GAIN <= (others => '0');
            ADC4_GAIN_WSTB <= '0';
        else
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            ADC1_GAIN_WSTB <= '0';
            ADC2_GAIN_WSTB <= '0';
            ADC3_GAIN_WSTB <= '0';
            ADC4_GAIN_WSTB <= '0';

            if (mem_cs_i = '1' and mem_wstb_i = '1') then
                -- Input Select Control Registers
                if (mem_addr = FMC_ENABLE) then
                    ENABLE <= mem_dat_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (mem_addr = FMC_ENABLE_DLY) then
                    ENABLE_DLY <= mem_dat_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (mem_addr = FMC_ADC1_GAIN) then
                    ADC1_GAIN <= mem_dat_i;
                    ADC1_GAIN_WSTB <= '1';
                end if;
                if (mem_addr = FMC_ADC2_GAIN) then
                    ADC2_GAIN <= mem_dat_i;
                    ADC2_GAIN_WSTB <= '1';
                end if;
                if (mem_addr = FMC_ADC3_GAIN) then
                    ADC3_GAIN <= mem_dat_i;
                    ADC3_GAIN_WSTB <= '1';
                end if;
                if (mem_addr = FMC_ADC4_GAIN) then
                    ADC4_GAIN <= mem_dat_i;
                    ADC4_GAIN_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            mem_dat_o <= (others => '0');
        else
            case (mem_addr) is
                when FMC_PRESENT =>
                    mem_dat_o <= PRESENT;
                when others =>
                    mem_dat_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);




end rtl;