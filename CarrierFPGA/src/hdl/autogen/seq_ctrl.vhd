--------------------------------------------------------------------------------
--  File:       seq_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity seq_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    PRESCALE       : out std_logic_vector(31 downto 0);
    PRESCALE_WSTB  : out std_logic;
    TABLE_CYCLE       : out std_logic_vector(31 downto 0);
    TABLE_CYCLE_WSTB  : out std_logic;
    CUR_FRAME       : in  std_logic_vector(31 downto 0);
    CUR_FCYCLE       : in  std_logic_vector(31 downto 0);
    CUR_TCYCLE       : in  std_logic_vector(31 downto 0);
    TABLE_START       : out std_logic_vector(31 downto 0);
    TABLE_START_WSTB  : out std_logic;
    TABLE_DATA       : out std_logic_vector(31 downto 0);
    TABLE_DATA_WSTB  : out std_logic;
    TABLE_LENGTH       : out std_logic_vector(31 downto 0);
    TABLE_LENGTH_WSTB  : out std_logic;
    enable_o : out std_logic;
    inpa_o : out std_logic;
    inpb_o : out std_logic;
    inpc_o : out std_logic;
    inpd_o : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end seq_ctrl;

architecture rtl of seq_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;
signal INPA      : std_logic_vector(31 downto 0);
signal INPA_WSTB : std_logic;
signal INPA_DLY      : std_logic_vector(31 downto 0);
signal INPA_DLY_WSTB : std_logic;
signal INPB      : std_logic_vector(31 downto 0);
signal INPB_WSTB : std_logic;
signal INPB_DLY      : std_logic_vector(31 downto 0);
signal INPB_DLY_WSTB : std_logic;
signal INPC      : std_logic_vector(31 downto 0);
signal INPC_WSTB : std_logic;
signal INPC_DLY      : std_logic_vector(31 downto 0);
signal INPC_DLY_WSTB : std_logic;
signal INPD      : std_logic_vector(31 downto 0);
signal INPD_WSTB : std_logic;
signal INPD_DLY      : std_logic_vector(31 downto 0);
signal INPD_DLY_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            PRESCALE <= (others => '0');
            PRESCALE_WSTB <= '0';
            TABLE_CYCLE <= (others => '0');
            TABLE_CYCLE_WSTB <= '0';
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            INPA <= (others => '0');
            INPA_WSTB <= '0';
            INPA_DLY <= (others => '0');
            INPA_DLY_WSTB <= '0';
            INPB <= (others => '0');
            INPB_WSTB <= '0';
            INPB_DLY <= (others => '0');
            INPB_DLY_WSTB <= '0';
            INPC <= (others => '0');
            INPC_WSTB <= '0';
            INPC_DLY <= (others => '0');
            INPC_DLY_WSTB <= '0';
            INPD <= (others => '0');
            INPD_WSTB <= '0';
            INPD_DLY <= (others => '0');
            INPD_DLY_WSTB <= '0';
            TABLE_START <= (others => '0');
            TABLE_START_WSTB <= '0';
            TABLE_DATA <= (others => '0');
            TABLE_DATA_WSTB <= '0';
            TABLE_LENGTH <= (others => '0');
            TABLE_LENGTH_WSTB <= '0';
        else
            PRESCALE_WSTB <= '0';
            TABLE_CYCLE_WSTB <= '0';
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            INPA_WSTB <= '0';
            INPA_DLY_WSTB <= '0';
            INPB_WSTB <= '0';
            INPB_DLY_WSTB <= '0';
            INPC_WSTB <= '0';
            INPC_DLY_WSTB <= '0';
            INPD_WSTB <= '0';
            INPD_DLY_WSTB <= '0';
            TABLE_START_WSTB <= '0';
            TABLE_DATA_WSTB <= '0';
            TABLE_LENGTH_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = SEQ_PRESCALE) then
                    PRESCALE <= write_data_i;
                    PRESCALE_WSTB <= '1';
                end if;
                if (write_addr = SEQ_TABLE_CYCLE) then
                    TABLE_CYCLE <= write_data_i;
                    TABLE_CYCLE_WSTB <= '1';
                end if;
                if (write_addr = SEQ_ENABLE) then
                    ENABLE <= write_data_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (write_addr = SEQ_ENABLE_DLY) then
                    ENABLE_DLY <= write_data_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPA) then
                    INPA <= write_data_i;
                    INPA_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPA_DLY) then
                    INPA_DLY <= write_data_i;
                    INPA_DLY_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPB) then
                    INPB <= write_data_i;
                    INPB_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPB_DLY) then
                    INPB_DLY <= write_data_i;
                    INPB_DLY_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPC) then
                    INPC <= write_data_i;
                    INPC_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPC_DLY) then
                    INPC_DLY <= write_data_i;
                    INPC_DLY_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPD) then
                    INPD <= write_data_i;
                    INPD_WSTB <= '1';
                end if;
                if (write_addr = SEQ_INPD_DLY) then
                    INPD_DLY <= write_data_i;
                    INPD_DLY_WSTB <= '1';
                end if;
                if (write_addr = SEQ_TABLE_START) then
                    TABLE_START <= write_data_i;
                    TABLE_START_WSTB <= '1';
                end if;
                if (write_addr = SEQ_TABLE_DATA) then
                    TABLE_DATA <= write_data_i;
                    TABLE_DATA_WSTB <= '1';
                end if;
                if (write_addr = SEQ_TABLE_LENGTH) then
                    TABLE_LENGTH <= write_data_i;
                    TABLE_LENGTH_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when SEQ_CUR_FRAME =>
                    read_data_o <= CUR_FRAME;
                when SEQ_CUR_FCYCLE =>
                    read_data_o <= CUR_FCYCLE;
                when SEQ_CUR_TCYCLE =>
                    read_data_o <= CUR_TCYCLE;
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);

bitmux_INPA : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => inpa_o,
    BITMUX_SEL  => INPA,
    BIT_DLY     => INPA_DLY
);

bitmux_INPB : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => inpb_o,
    BITMUX_SEL  => INPB,
    BIT_DLY     => INPB_DLY
);

bitmux_INPC : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => inpc_o,
    BITMUX_SEL  => INPC,
    BIT_DLY     => INPC_DLY
);

bitmux_INPD : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => inpd_o,
    BITMUX_SEL  => INPD,
    BIT_DLY     => INPD_DLY
);




end rtl;