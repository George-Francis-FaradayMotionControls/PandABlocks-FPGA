--------------------------------------------------------------------------------
--  File:       outenc_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.type_defines.all;
use work.addr_defines.all;
use work.top_defines.all;

entity outenc_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    PROTOCOL       : out std_logic_vector(31 downto 0);
    PROTOCOL_WSTB  : out std_logic;
    BITS       : out std_logic_vector(31 downto 0);
    BITS_WSTB  : out std_logic;
    QPERIOD       : out std_logic_vector(31 downto 0);
    QPERIOD_WSTB  : out std_logic;
    QSTATE       : in  std_logic_vector(31 downto 0);
    enable_o : out std_logic;
    a_o : out std_logic;
    b_o : out std_logic;
    z_o : out std_logic;
    conn_o : out std_logic;
    val_o : out std_logic_vector(31 downto 0);
    -- Memory Bus Interface
    mem_cs_i            : in  std_logic;
    mem_wstb_i          : in  std_logic;
    mem_addr_i          : in  std_logic_vector(BLK_AW-1 downto 0);
    mem_dat_i           : in  std_logic_vector(31 downto 0);
    mem_dat_o           : out std_logic_vector(31 downto 0)
);
end outenc_ctrl;

architecture rtl of outenc_ctrl is

signal mem_addr : natural range 0 to (2**mem_addr_i'length - 1);

signal ENABLE      : std_logic_vector(31 downto 0);
signal ENABLE_WSTB : std_logic;
signal ENABLE_DLY      : std_logic_vector(31 downto 0);
signal ENABLE_DLY_WSTB : std_logic;
signal A      : std_logic_vector(31 downto 0);
signal A_WSTB : std_logic;
signal A_DLY      : std_logic_vector(31 downto 0);
signal A_DLY_WSTB : std_logic;
signal B      : std_logic_vector(31 downto 0);
signal B_WSTB : std_logic;
signal B_DLY      : std_logic_vector(31 downto 0);
signal B_DLY_WSTB : std_logic;
signal Z      : std_logic_vector(31 downto 0);
signal Z_WSTB : std_logic;
signal Z_DLY      : std_logic_vector(31 downto 0);
signal Z_DLY_WSTB : std_logic;
signal VAL      : std_logic_vector(31 downto 0);
signal VAL_WSTB : std_logic;
signal CONN      : std_logic_vector(31 downto 0);
signal CONN_WSTB : std_logic;
signal CONN_DLY      : std_logic_vector(31 downto 0);
signal CONN_DLY_WSTB : std_logic;

begin

mem_addr <= to_integer(unsigned(mem_addr_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            PROTOCOL <= (others => '0');
            PROTOCOL_WSTB <= '0';
            BITS <= (others => '0');
            BITS_WSTB <= '0';
            QPERIOD <= (others => '0');
            QPERIOD_WSTB <= '0';
            ENABLE <= (others => '0');
            ENABLE_WSTB <= '0';
            ENABLE_DLY <= (others => '0');
            ENABLE_DLY_WSTB <= '0';
            A <= (others => '0');
            A_WSTB <= '0';
            A_DLY <= (others => '0');
            A_DLY_WSTB <= '0';
            B <= (others => '0');
            B_WSTB <= '0';
            B_DLY <= (others => '0');
            B_DLY_WSTB <= '0';
            Z <= (others => '0');
            Z_WSTB <= '0';
            Z_DLY <= (others => '0');
            Z_DLY_WSTB <= '0';
            VAL <= (others => '0');
            VAL_WSTB <= '0';
            CONN <= (others => '0');
            CONN_WSTB <= '0';
            CONN_DLY <= (others => '0');
            CONN_DLY_WSTB <= '0';
        else
            PROTOCOL_WSTB <= '0';
            BITS_WSTB <= '0';
            QPERIOD_WSTB <= '0';
            ENABLE_WSTB <= '0';
            ENABLE_DLY_WSTB <= '0';
            A_WSTB <= '0';
            A_DLY_WSTB <= '0';
            B_WSTB <= '0';
            B_DLY_WSTB <= '0';
            Z_WSTB <= '0';
            Z_DLY_WSTB <= '0';
            VAL_WSTB <= '0';
            CONN_WSTB <= '0';
            CONN_DLY_WSTB <= '0';

            if (mem_cs_i = '1' and mem_wstb_i = '1') then
                -- Input Select Control Registers
                if (mem_addr = OUTENC_PROTOCOL) then
                    PROTOCOL <= mem_dat_i;
                    PROTOCOL_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_BITS) then
                    BITS <= mem_dat_i;
                    BITS_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_QPERIOD) then
                    QPERIOD <= mem_dat_i;
                    QPERIOD_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_ENABLE) then
                    ENABLE <= mem_dat_i;
                    ENABLE_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_ENABLE_DLY) then
                    ENABLE_DLY <= mem_dat_i;
                    ENABLE_DLY_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_A) then
                    A <= mem_dat_i;
                    A_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_A_DLY) then
                    A_DLY <= mem_dat_i;
                    A_DLY_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_B) then
                    B <= mem_dat_i;
                    B_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_B_DLY) then
                    B_DLY <= mem_dat_i;
                    B_DLY_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_Z) then
                    Z <= mem_dat_i;
                    Z_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_Z_DLY) then
                    Z_DLY <= mem_dat_i;
                    Z_DLY_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_VAL) then
                    VAL <= mem_dat_i;
                    VAL_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_CONN) then
                    CONN <= mem_dat_i;
                    CONN_WSTB <= '1';
                end if;
                if (mem_addr = OUTENC_CONN_DLY) then
                    CONN_DLY <= mem_dat_i;
                    CONN_DLY_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            mem_dat_o <= (others => '0');
        else
            case (mem_addr) is
                when OUTENC_QSTATE =>
                    mem_dat_o <= QSTATE;
                when others =>
                    mem_dat_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_ENABLE : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => enable_o,
    BITMUX_SEL  => ENABLE,
    BIT_DLY     => ENABLE_DLY
);

bitmux_A : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => a_o,
    BITMUX_SEL  => A,
    BIT_DLY     => A_DLY
);

bitmux_B : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => b_o,
    BITMUX_SEL  => B,
    BIT_DLY     => B_DLY
);

bitmux_Z : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => z_o,
    BITMUX_SEL  => Z,
    BIT_DLY     => Z_DLY
);

bitmux_CONN : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => conn_o,
    BITMUX_SEL  => CONN,
    BIT_DLY     => CONN_DLY
);



posmux_VAL : entity work.posmux
port map (
    clk_i       => clk_i,
    posbus_i    => posbus_i,
    posn_o      => val_o,
    POSMUX_SEL  => VAL,
    POS_DLY     => (others => '0') --VAL_DLY
);

end rtl;