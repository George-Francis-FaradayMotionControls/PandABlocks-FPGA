--------------------------------------------------------------------------------
--  File:       srgate_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity srgate_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    sysbus_i            : in sysbus_t;
    posbus_i            : in posbus_t;
    -- Block Parameters
    SET_EDGE       : out std_logic_vector(31 downto 0);
    SET_EDGE_WSTB  : out std_logic;
    RST_EDGE       : out std_logic_vector(31 downto 0);
    RST_EDGE_WSTB  : out std_logic;
    FORCE_SET       : out std_logic_vector(31 downto 0);
    FORCE_SET_WSTB  : out std_logic;
    FORCE_RST       : out std_logic_vector(31 downto 0);
    FORCE_RST_WSTB  : out std_logic;
    set_o : out std_logic;
    rst_o : out std_logic;
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end srgate_ctrl;

architecture rtl of srgate_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

signal SET      : std_logic_vector(31 downto 0);
signal SET_WSTB : std_logic;
signal SET_DLY      : std_logic_vector(31 downto 0);
signal SET_DLY_WSTB : std_logic;
signal RST      : std_logic_vector(31 downto 0);
signal RST_WSTB : std_logic;
signal RST_DLY      : std_logic_vector(31 downto 0);
signal RST_DLY_WSTB : std_logic;

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            SET_EDGE <= (others => '0');
            SET_EDGE_WSTB <= '0';
            RST_EDGE <= (others => '0');
            RST_EDGE_WSTB <= '0';
            FORCE_SET <= (others => '0');
            FORCE_SET_WSTB <= '0';
            FORCE_RST <= (others => '0');
            FORCE_RST_WSTB <= '0';
            SET <= (others => '0');
            SET_WSTB <= '0';
            SET_DLY <= (others => '0');
            SET_DLY_WSTB <= '0';
            RST <= (others => '0');
            RST_WSTB <= '0';
            RST_DLY <= (others => '0');
            RST_DLY_WSTB <= '0';
        else
            SET_EDGE_WSTB <= '0';
            RST_EDGE_WSTB <= '0';
            FORCE_SET_WSTB <= '0';
            FORCE_RST_WSTB <= '0';
            SET_WSTB <= '0';
            SET_DLY_WSTB <= '0';
            RST_WSTB <= '0';
            RST_DLY_WSTB <= '0';

            if (write_strobe_i = '1') then
                -- Input Select Control Registers
                if (write_addr = SRGATE_SET_EDGE) then
                    SET_EDGE <= write_data_i;
                    SET_EDGE_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_RST_EDGE) then
                    RST_EDGE <= write_data_i;
                    RST_EDGE_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_FORCE_SET) then
                    FORCE_SET <= write_data_i;
                    FORCE_SET_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_FORCE_RST) then
                    FORCE_RST <= write_data_i;
                    FORCE_RST_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_SET) then
                    SET <= write_data_i;
                    SET_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_SET_DLY) then
                    SET_DLY <= write_data_i;
                    SET_DLY_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_RST) then
                    RST <= write_data_i;
                    RST_WSTB <= '1';
                end if;
                if (write_addr = SRGATE_RST_DLY) then
                    RST_DLY <= write_data_i;
                    RST_DLY_WSTB <= '1';
                end if;

            end if;
        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        if (reset_i = '1') then
            read_data_o <= (others => '0');
        else
            case (read_addr) is
                when others =>
                    read_data_o <= (others => '0');
            end case;
        end if;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
bitmux_SET : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => set_o,
    BITMUX_SEL  => SET,
    BIT_DLY     => SET_DLY
);

bitmux_RST : entity work.bitmux
port map (
    clk_i       => clk_i,
    sysbus_i    => sysbus_i,
    bit_o       => rst_o,
    BITMUX_SEL  => RST,
    BIT_DLY     => RST_DLY
);




end rtl;