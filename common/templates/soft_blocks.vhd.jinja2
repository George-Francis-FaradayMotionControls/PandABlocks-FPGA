-- AUTOGENERATED
--------------------------------------------------------------------------------
-- Blocks top-level interface
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library unisim;
use unisim.vcomponents.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity soft_blocks is
generic (
    SIM             : string := "FALSE"
);
port (
    -- Global clock and reset from panda_ps
    FCLK_CLK0       : in    std_logic;
    FCLK_RESET0     : in    std_logic;
    -- Configuration and Status Interface Block
    read_strobe     : in    std_logic_vector(MOD_COUNT-1 downto 0);
    read_address    : in    std_logic_vector(PAGE_AW-1 downto 0);
    read_data       : out   std32_array(MOD_COUNT-1 downto 0);
    read_ack        : out   std_logic_vector(MOD_COUNT-1 downto 0) := (others => '1');
    write_strobe    : in    std_logic_vector(MOD_COUNT-1 downto 0);
    write_address   : in    std_logic_vector(PAGE_AW-1 downto 0);
    write_data      : in    std_logic_vector(31 downto 0);
    write_ack       : out   std_logic_vector(MOD_COUNT-1 downto 0) := (others => '1');
    -- Bus Outputs
    bit_bus         : inout sysbus_t;
    posbus          : inout posbus_t;
    -- DMA Blocks
    rdma_req        : out   std_logic_vector(5 downto 0);
    rdma_ack        : in    std_logic_vector(5 downto 0);
    rdma_done       : in    std_logic;
    rdma_addr       : out   std32_array(5 downto 0);
    rdma_len        : out   std8_array(5 downto 0);
    rdma_data       : in    std_logic_vector(31 downto 0);
    rdma_valid      : in    std_logic_vector(5 downto 0);
    --
    FMC             : inout FMC_interface;
    SFPA            : inout SFP_interface;
    SFPB            : inout SFP_interface;
    SFPC            : inout SFP_interface
);
end soft_blocks;

architecture rtl of soft_blocks is
-- Chip selects and Block Num constants are declared in addr_defines

begin
{# Using a namespace jinja2 object may make iterating simpler #}
{% set bit = [bit_bus_length] %}{% set pos = [pos_bus_length] %}
{% set dma = [0] %}
{% for block in blocks %}
    {% if block.type in "soft|dma" %}
--------------------------------------------------------------------------------
-- {{block.entity}} - {{block.description}}
--------------------------------------------------------------------------------
{{ block.entity }}_inst : entity work.{{ block.entity }}_wrapper
generic map (NUM => {{ block.entity }}_NUM)
port map (

    reset_i             => FCLK_RESET0,
    
    read_strobe_i       => read_strobe({{ block.entity }}_CS),
    read_address_i      => read_address,
    read_data_o         => read_data({{ block.entity }}_CS),
    read_ack_o          => read_ack({{ block.entity }}_CS),

    write_strobe_i      => write_strobe({{ block.entity }}_CS),
    write_address_i     => write_address,
    write_data_i        => write_data,
    write_ack_o         => write_ack({{ block.entity }}_CS),
    
        {% if block.type in ("dma") %}
    dma_req_o           => rdma_req({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_ack_i           => rdma_ack({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_done_i          => rdma_done,
    dma_addr_o          => rdma_addr({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_len_o           => rdma_len({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_data_i          => rdma_data,
    dma_valid_i         => rdma_valid({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
        {% if dma.append(dma.pop() + 1) %}{% endif %}
    
        {% endif %}
        {% for field in block.filter_fields("bit_mux") %}
            {% if loop.first %}
    bit_bus_i           => bit_bus,
            {% endif %}
        {% endfor %}
        {% for field in block.filter_fields("pos_mux") %}
            {% if loop.first %}
    pos_bus_i           => posbus,
            {% endif %}
        {% endfor %}
    
        {% for field in block.filter_fields("bit_out") %}
    {{ "%-20s" |format(field.name + "_o") }}=> bit_bus ({{ bit[0] + block.number - 1 }} downto {{ bit[0] }}),
            {% for i in range(block.number) %}
                {% if bit.append(bit.pop() + 1) %}{% endif %}
            {% endfor %}
        {% endfor %}
        {% for field in block.filter_fields("pos_out") %}
    {{ "%-20s" | format(field.name + "_o") }}=> posbus ({{ pos[0] + block.number -1 }} downto {{ pos[0] }}),
            {% for i in range(block.number) %}
                {% if pos.append(pos.pop() + 1) %}{% endif %}
            {% endfor %}
        {% endfor %}
    
    clk_i               => FCLK_CLK0
);
    {% endif %}

{% endfor %}
{% for block in blocks if block.type == "fmc" %}
---------------------------------------------------------------------------
-- FMC Loopback design
---------------------------------------------------------------------------
    {% if loop.first %}

FMC_GEN : IF (SIM = "FALSE") GENERATE
	{% endif %}

    {{ block.name|lower }}_inst : entity work.{{block.entity}}_top
    port map (
        clk_i               => FCLK_CLK0,
        reset_i             => FCLK_RESET0,

        bitbus_i            => bit_bus,
        posbus_i            => posbus,
        fmc_inputs_o        => open,
        {% for field in block.filter_fields("pos_out") %}
            {% if loop.first %}
        {{"%-20s" | format("fmc_data_o(" + loop.revindex0|string + " downto " + "0)")}}=> posbus ({{ pos[0] + loop.revindex0 }} downto {{ pos[0] }}),
            {% endif %}
            {% for i in range(block.number) %}
                {% if pos.append(pos.pop() + 1) %}{% endif %}
            {% endfor %}
        {% endfor %}

        read_strobe_i       => read_strobe({{ block.name }}_CS),
        read_address_i      => read_address,
        read_data_o         => read_data({{ block.name }}_CS),
        read_ack_o          => read_ack({{ block.name }}_CS),

        write_strobe_i      => write_strobe({{ block.name }}_CS),
        write_address_i     => write_address,
        write_data_i        => write_data,
        write_ack_o         => write_ack({{ block.name }}_CS),

        FMC_interface       => FMC
    );
    {% if loop.last %}
END GENERATE;
    {% endif %}
{% endfor %}
{% for block in blocks if block.type == "sfp" %}
    {% if loop.first %}

SFP_GEN : IF (SIM = "FALSE") GENERATE

    {% endif %}
--------------------------------------------------------------------------------
-- {{ block.entity }} - {{ block.description }} 
--------------------------------------------------------------------------------
    {{ block.name|lower }}_inst : entity work.{{block.entity}}_top
    port map (
        clk_i               => FCLK_CLK0,
        reset_i             => FCLK_RESET0,

        sysbus_i            => bit_bus,
        sfp_inputs_o        => open,
         {% for field in block.filter_fields("pos_out") %}
            {% if loop.first %}
        {{"%-20s" | format("fmc_data_o(" + loop.revindex0|string + " downto " + "0)")}}=> posbus ({{ pos[0] + loop.revindex0 }} downto {{ pos[0] }}),
            {% endif %}
            {% for i in range(block.number) %}
                {% if pos.append(pos.pop() + 1) %}{% endif %}
            {% endfor %}
        {% endfor %}

        read_strobe_i       => read_strobe({{ block.name }}_CS),
        read_address_i      => read_address,
        read_data_o         => read_data({{ block.name }}_CS),
        read_ack_o          => read_ack({{ block.name }}_CS),

        write_strobe_i      => write_strobe({{ block.name }}_CS),
        write_address_i     => write_address,
        write_data_i        => write_data,
        write_ack_o         => write_ack({{ block.name }}_CS),

        SFP_interface       => {{ block.name }}
    );
    {% if loop.last %}
END GENERATE;
    {% endif %}

{% endfor %}
end rtl;

