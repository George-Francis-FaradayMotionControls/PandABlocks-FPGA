--------------------------------------------------------------------------------
-- Blocks top-level interface
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library unisim;
use unisim.vcomponents.all;

library work;
use work.top_defines.all;

entity soft_blocks is
generic (
    SIM             : string := "FALSE"
);
port (
    -- Global clock and reset from panda_ps
    FCLK_CLK0       : in    std_logic;
    FCLK_RESET0     : in    std_logic;
    -- Configuration and Status Interface Block
    read_strobe     : in    std_logic_vector(MOD_COUNT-1 downto 0);
    read_address    : in    std_logic_vector(PAGE_AW-1 downto 0);
    read_data       : out   std32_array(MOD_COUNT-1 downto 0);
    read_ack        : out   std_logic_vector(MOD_COUNT-1 downto 0) := (others => '1');
    write_strobe    : in    std_logic_vector(MOD_COUNT-1 downto 0);
    write_address   : in    std_logic_vector(PAGE_AW-1 downto 0);
    write_data      : in    std_logic_vector(31 downto 0);
    write_ack       : out   std_logic_vector(MOD_COUNT-1 downto 0) := (others => '1');
    -- Bus Outputs
    bit_bus         : inout sysbus_t;
    posbus          : inout posbus_t;
    -- PCOMP and PGEN Block
    rdma_req        : out   std_logic_vector(5 downto 0);
    rdma_ack        : in    std_logic_vector(5 downto 0);
    rdma_done       : in    std_logic;
    rdma_addr       : out   std32_array(5 downto 0);
    rdma_len        : out   std8_array(5 downto 0);
    rdma_data       : in    std_logic_vector(31 downto 0);
    rdma_valid      : in    std_logic_vector(5 downto 0);
    --
    FMC             : inout FMC_record;
    SFP1            : inout SFP_record;
    SFP2            : inout SFP_record;
    SFP3            : inout SFP_record
);
end soft_blocks;

architecture rtl of soft_blocks is

-- Definitions below need to be automatically populated by Jinja
-- Only for soft blocks though!
-- "NUM" paramters resolved here and inherited in blocks by generics

-- Functional Address Space Chip Selects

{% for block in blocks %}
{# 10 used as next available slot from panda_carrier_top #}
constant {{ block.entity }}_CS : natural := {{10 + loop.index0}};
{% endfor %}

-- Block instantiation

{% for block in blocks %}
constant {{ block.entity }}_NUM : natural := {{ block.number }};
{% endfor %}

begin

{# Using a namespace jinja2 object may make iterating simpler #}
{% set bit = [32] %}
{% set pos = [4] %}
{% set dma = [0] %}
{% for block in blocks %}
--------------------------------------------------------------------------------
-- {{block.entity}} - {{block.description}}
--------------------------------------------------------------------------------
{{ block.entity }}_inst : entity work.{{ block.entity }}_wrapper
generic map (NUM => {{ block.entity }}_NUM)
port map (

    reset_i             => FCLK_REST0,
    
    read_strobe_i       => read_strobe({{ block.entity }}_CS),
    read_address_i      => read_address,
    read_data_o         => read_data({{ block.entity }}_CS),
    read_ack_o          => read_ack({{ block.entity }}_CS),

    write_strobe_i      => write_strobe({{ block.entity }}_CS),
    write_address_i     => write_address,
    write_data_i        => write_data,
    write_ack_o         => write_ack({{ block.entity }}_CS),
    
    {% if block.entity in ("pgen") %}
    dma_req_o           => rdma_req({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_ack_i           => rdma_ack({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_done_i          => rdma_done,
    dma_addr_o          => rdma_addr({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_len_o           => rdma_len({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_data_i          => rdma_data,
    dma_valid_i         => rdma_valid({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    {% if dma.append(dma.pop() + 1) %}{% endif %}
    
    {% endif %}
    {% for field in block.filter_fields("bit_mux") %}
        {% if loop.first %}
    bit_bus_i           => bit_bus,
        {% endif %}
    {% endfor %}
    {% for field in block.filter_fields("pos_mux") %}
        {% if loop.first %}
    pos_bus_i           => posbus,
        {% endif %}
    {% endfor %}
    
    {% for field in block.filter_fields("bit_out") %}
    {{ field.name }}_o           => bit_bus ({{ bit[0] + block.number - 1 }} downto {{ bit[0] }}),
        {% for i in range(block.number) %}
            {% if bit.append(bit.pop() + 1) %}{% endif %}
        {% endfor %}
    {% endfor %}
    {% for field in block.filter_fields("pos_out") %}
    {{ field.name }}_o           => posbus ({{ pos[0] + block.number -1 }} downto {{ pos[0] }}),
        {% for i in range(block.number) %}
            {% if pos.append(pos.pop() + 1) %}{% endif %}
        {% endfor %}
    {% endfor %}
    
    clk_i               => FCLK_CLK0
);

{% endfor %}

end rtl;

