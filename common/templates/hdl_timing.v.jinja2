// AUTOGENERATED
////////////////////////////////////////////////////////////////////////////////
// Timing testbench: {{block.entity}} - {{ section }}
// {{block.description}}
////////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps

module {{block.entity}}_{{number}}_tb;

reg clk_i = 0;
always #4 clk_i = ~clk_i;

// Inputs from initialisation file
{% for field in block.filter_fields(
    "bit_mux|param bit|write action") %}
reg         {{ field.name }};
{% endfor %}
{% for field in block.filter_fields("param enum")%}
reg  [{{field.enumlength}}:0]  {{ field.name }};
{% endfor %}
{# param has to be last in series of or'd filter fields otherwise it will 
include field types which start with param, param enum for example #}
{% for field in block.filter_fields(
    "pos_mux|param lut|param time|param int|write int|param") %}
reg  [31:0] {{ field.name }};
{% endfor %}
{% for field in block.filter_fields("time") %}
wire [47:0] {{ field.name }};
reg  [31:0] {{ field.name }}_L;
reg  [15:0] {{ field.name }}_H;
{% endfor %}
{% for field in block.filter_fields("table short") %}
reg  [31:0] {{ field.name }}_DATA;
reg         {{ field.name }}_START;
reg  [31:0] {{ field.name }}_LENGTH;
{% endfor %}
{% for field in block.filter_fields("table") %}
reg  [31:0] {{ field.name }}_ADDRESS;
reg  [31:0] {{ field.name }}_LENGTH;
{% endfor %}

// Outputs
{% for field in block.filter_fields("bit_out") %}
reg         {{ field.name }};       //Output from ini file
wire        {{ field.name }}_uut;   //Output from UUT
reg         {{ field.name }}_err;   //Error signal

{% endfor %}
{# read also needs to be last in list of filter_fields #}
{% for field in block.filter_fields("pos_out|read uint 1023|read") %}
reg  [31:0] {{ field.name }};       //Output from ini file
wire [31:0] {{ field.name }}_uut;   //Output from UUT
reg         {{ field.name }}_err;   //Error signal

{% endfor %}
{% for field in block.filter_fields("read enum") %}
reg   [{{field.enumlength}}:0] {{ field.name }};       //Output from ini file
wire  [{{field.enumlength}}:0] {{ field.name }}_uut;   //Output from UUT
reg         {{ field.name }}_err;   //Error signal	

{% endfor %}
// Write Strobes
{% for field in block.fields %}
    {% if field.wstb %}
        {% if field.type == "time" %}
reg         {{ field.name }}_L_wstb;
reg         {{ field.name }}_H_wstb;
wire        {{ field.name }}_wstb;
        {% elif field in block.filter_fields("table short") %}
reg         {{ field.name }}_DATA_wstb;
reg         {{ field.name }}_LENGTH_wstb;
        {% elif field in block.filter_fields("table") %}
reg         {{ field.name }}_ADDRESS_wstb;
reg         {{ field.name }}_LENGTH_wstb;
        {% else %}
reg         {{ field.name }}_wstb;
        {% endif %}
    {% endif %}
{% endfor %}

{% if block.type in "dma" %}
// DMA interface
wire        dma_req_o;
reg         dma_ack_i;
reg         dma_done_i;
wire [31:0] dma_addr_o;
wire [7:0]  dma_len_o;
reg  [31:0] dma_data_i = 0;
reg dma_valid_i = 0;
{% endif %}

// Signals used within test
reg         test_result = 0;
integer     fid;
integer     r;
integer     timestamp = 0;

//
// Values in the test files are arranged on FPGA clock ticks on the
// first column. This way all files are read synchronously.
//
// To achieve that a free running global Timestamp Counter below
// is used.
//

initial begin
    repeat (5) @(posedge clk_i);
    while (1) begin
        timestamp <= timestamp + 1;
        @(posedge clk_i);
    end
end

//
// Read expected values file
//

// Array to hold each of the {{headerslength}} characters in header line
reg [7:0] ignore[{{(headerslength)-1}}:0];
integer data_in[{{ header|length-1 }}:0];
reg is_file_end = 0;
integer i;
initial for (i = 0; i <= {{headerslength-1}}; i = i + 1) ignore[i] = 0;

initial begin
{% for field in header %}
    {% if not loop.first %}
    {{ field }} = 0;
    {% endif %}
{% endfor %}

    @(posedge clk_i);
    fid=$fopen("{{number}}{{block.entity}}expected.csv","r");
    // Read and ignore description field
    r=$fgets(ignore, fid);
{# Creates a list of strings of "data_in[i]" #}
{% set datalist=[] %}
{% for i in range(header|length)|reverse %}
    {% if datalist.append("        data_in[" + i|string + "]") %}{% endif %}
{% endfor %}
    // Read and store the expected data from the csv file
    while (!$feof(fid)) begin
        r=$fscanf(fid,"{{ " ".join(("%d",)*header|length)}}\n",
    {{",\n    ".join(datalist)}}
        );
        if (r != {{ header|length}}) begin
            $display("\n    error reading file \n");
            test_result <= 1;
            @(negedge clk_i);
            $finish(2);
        end
{% for field in header %}
    {% if loop.first %}
        wait (timestamp == data_in[{{loop.revindex0}}]) begin
    {% else %}
        {% if field != "TABLE_ADDRESS" %}
                {{ field }} <= data_in[{{loop.revindex0}}];
        {% endif %}
    {% endif %}
{% endfor %}
        end
        @(posedge clk_i);
    end
    repeat(100) @(posedge clk_i);
    is_file_end = 1;
end

//
// ERROR DETECTION:
// Compare Block Outputs and Expected Outputs.
//
always @(posedge clk_i)
begin
    if (~is_file_end) begin
    // If not equal, display an error.
    // If the io file signal contains an 0 when the UUT signal is zero, the
    // test should not error, but for other io signal values display an error
{% for field in block.fields%}
    {% if field in block.filter_fields("bit_out") or field in
            block.filter_fields("read") or field in
            block.filter_fields("pos_out") or field in 
            block.filter_fields("read enum") or field in
            block.filter_fields("read uint 1023") %}
        if ({{ field.name }} != {{field.name}}_uut || ({{ field.name
        }} > 0 && ^{{ field.name }}_uut === 1'bx)) begin
            $display("{{
            field.name}} error detected at timestamp %d\n", timestamp);
            {{field.name}}_err <= 1;
            test_result <= 1;
        end
    {% endif %}
{% endfor %}
    end
end

{% if block.type in "dma" %}
// PGEN_1000.txt 
// data_mem
parameter STATE_IDLE = 0;
parameter STATE_TABLE_ADDR = 1;
parameter STATE_FINISHED = 2;

reg [1:0] STATE;

integer     pfid;
integer     pr;
integer     preg_in;

reg [5:0]   cnt;
reg [31:0]  data_mem [31:0];

initial begin
    cnt = 0;
    
    @(posedge clk_i);
    
    // Open "PGEN_1000" file
    pfid = $fopen("PGEN_1000.txt", "r"); // VAL
    // Read and ignore description field
    pr = $fscanf(pfid, "%s\n", preg_in);
    
    while (!$feof(pfid)) begin
        pr = $fscanf(pfid, "%d\n", preg_in); 
        data_mem[cnt] <= preg_in;
        cnt <= cnt +1;
    
        @(posedge clk_i);
        
    end
end        



reg [5:0]   mem_loop = 0;
reg [5:0]   mem_cnt = 0;

initial begin
    STATE = STATE_IDLE;
    dma_valid_i = 0;
    mem_loop = 0;
    mem_cnt = 0;
    dma_ack_i = 0;
    dma_done_i = 0;
end

always @(posedge clk_i) begin

    case (STATE)

        STATE_IDLE:
        begin
            // Wait until the TABLE_ADDRESS_WSTB is active 
            if (TABLE_ADDRESS_wstb == 1) begin
                STATE <= STATE_TABLE_ADDR;
            end
        end        

        STATE_TABLE_ADDR:
        begin
            dma_ack_i <= 1;
            dma_done_i <= 1;
            TABLE_ADDRESS <= 32'h00000000;
            dma_valid_i <= 1;
            // This is the last read out of the memory increment the loop counter 
            if (mem_cnt == cnt-1) begin
                mem_loop <= mem_loop +1;
                mem_cnt <= 0;
                dma_data_i <= data_mem[mem_cnt];
                // The mem_loop equals the number of CYCLES to be done
                if (mem_loop == CYCLES-1) begin
                   STATE <= STATE_FINISHED;
                end    
            // Read the values out of the memory    
            end else begin
                mem_cnt <= mem_cnt +1;
                dma_data_i <= data_mem[mem_cnt];
            end    
         end        

        STATE_FINISHED:
        begin
            // Finished reset everything
            dma_ack_i = 0;
            dma_done_i = 0;
            dma_valid_i <= 0;
            mem_loop <= 0;
            mem_cnt  <= 0;
            STATE <= STATE_IDLE;
        end      

        default:
            STATE <= STATE_IDLE;

    endcase
end 

{% endif %}

// $stop Halts a simulation and enters an interactive debug mode
// $finish Finishes a simulation and exits the simulation process
always @ (posedge clk_i)
begin
    if (is_file_end) begin
        $display("Simulation has finished");
        $finish(2);
    end
end

{% for field in block.fields %}
    {% if field.type == "time" %}    
assign {{field.name}} = { {{field.name}}_H, {{field.name}}_L};
assign {{field.name}}_wstb = {{field.name}}_H_wstb || {{field.name}}_L_wstb;
    {% endif %}
{% endfor %}
// Instantiate the Unit Under Test (UUT)
{{block.entity}} uut (

{% for field in block.fields %}
    {% if field in block.filter_fields(".*out")%}
        .{{ "%-20s"| format(field.name + "_o") }}  ({{ field.name }}_uut),
    {% elif field in block.filter_fields("read.*") %}
        .{{ "%-20s"| format(field.name) }}  ({{ field.name }}_uut),
    {% elif field in block.filter_fields(".*mux") %}
        .{{ "%-20s"| format(field.name + "_i") }}  ({{ field.name }}),
        {% if field.wstb %}
        .{{ "%-20s"| format(field.name + "_wstb")}}  ({{ field.name }}_wstb),
    	{% endif %}
    {% elif field in block.filter_fields("table short") %}
        .{{ "%-20s"| format(field.name + "_DATA") }}  ({{ field.name }}_DATA),
        .{{ "%-20s"| format(field.name + "_LENGTH") }}  ({{ field.name }}_LENGTH),
        .{{ "%-20s"| format(field.name + "_START") }}  ({{ field.name }}_START),
        {% if field.wstb %}
        .{{ "%-20s"| format(field.name + "_LENGTH_wstb") }}  ({{ field.name }}_LENGTH_wstb),
        .{{ "%-20s"| format(field.name + "_wstb") }}  ({{ field.name }}_DATA_wstb),      
        {% endif %}
    {% elif field in block.filter_fields("table") %}
        .{{ "%-20s"| format(field.name + "_ADDR") }}  ({{ field.name }}_ADDRESS),
        .{{ "%-20s"| format(field.name + "_LENGTH") }}  ({{ field.name }}_LENGTH),
        {% if field.wstb %}
        .{{ "%-20s"| format(field.name + "_LENGTH_wstb") }}  ({{ field.name }}_LENGTH_wstb),      
        {% endif %}
    {% else %}
        .{{ "%-20s"| format(field.name) }}  ({{ field.name }}),
        {% if field.wstb%}
        .{{ "%-20s"| format(field.name + "_wstb") }}  ({{ field.name }}_wstb),
        {% endif %}
    {% endif %}
{% endfor %}
{% if block.type in "dma" %}{# change to new dma selector in block.ini #}
        .dma_req_o             (dma_req_o),
        .dma_ack_i             (dma_ack_i),
        .dma_done_i            (dma_done_i),
        .dma_addr_o            (dma_addr_o),
        .dma_len_o             (dma_len_o),
        .dma_data_i            (dma_data_i),
        .dma_valid_i           (dma_valid_i),
{% endif %}
        .clk_i                 (clk_i)
);

endmodule
