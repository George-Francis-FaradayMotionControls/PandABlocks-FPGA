////////////////////////////////////////////////////////////////////////////////
// Timing testbench: {{block.entity}} - {{ section }}
// {{block.description}} {{module_path}}
////////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps

module {{block.entity}}_{{number}}_tb;

reg clk_i = 0;
always #4 clk_i = ~clk_i;

// Inputs from initialisation file
{% for field in block.filter_fields(
    "bit_mux|param bit|write action") %}
reg         {{ field.name }};
{% endfor %}
{% for field in block.filter_fields("param enum")%}
reg  [1:0]  {{ field.name }};
{% endfor %}
{% for field in block.filter_fields(
	"pos_mux|param lut|param time|param int|write int") %}
reg  [31:0] {{ field.name }};
{% endfor %}
{% for field in block.filter_fields("param") %}
{# When | with other 32 bit register fields, param enums are declared twice.. #}
reg  [31:0] {{ field.name }};
{% endfor %}
{% for field in block.filter_fields("time") %}
reg  [47:0] {{ field.name}};
{% endfor %}

//Outputs
{% for field in block.filter_fields("bit_out") %}
reg         {{ field.name }};		//Output from ini file
wire        {{ field.name }}_uut;	//Output from UUT
reg         {{ field.name }}_err;	//Error signal

{% endfor %}
{% for field in block.filter_fields("pos_out|read uint 1023") %}
reg  [31:0] {{ field.name }};		//Output from ini file
wire [31:0] {{ field.name }}_uut;	//Output from UUT
reg         {{ field.name }}_err;	//Error signal

{% endfor %}
{% for field in block.filter_fields("read") %}
{# When | with other 32 bit register fields, read enums are declared twice #}
reg  [31:0] {{ field.name }};       //Output from ini file
wire [31:0] {{ field.name }}_uut;   //Output from UUT
reg         {{ field.name }}_err;   //Error signal

{% endfor %}
{% for field in block.filter_fields("read enum") %}
	{% if block.entity == "pcomp" and field.name == "STATE" %}
reg   [2:0] {{ field.name }};		//Output from ini file
wire  [2:0] {{ field.name }}_uut;	//Output from UUT
reg			{{ field.name }}_err;	//Error signal	

	{% else %}
reg   [1:0] {{ field.name }};		//Output from ini file
wire  [1:0] {{ field.name }}_uut;	//Output from UUT
reg			{{ field.name }}_err;	//Error signal

	{% endif %}
{% endfor %}
// Write Strobes
{% for field in block.fields %}
	{% if field.wstb %}
reg         {{field.name}}_wstb;
	{% endif %}
{% endfor %}

//Signals used within test
reg         test_result = 0;
integer     fid;
integer     r;
integer     timestamp = 0;

//
// Values in the test files are arranged on FPGA clock ticks on the
// first column. This way all files are read synchronously.
//
// To achieve that a free running global Timestamp Counter below
// is used.
//

initial begin
    repeat (5) @(posedge clk_i);
    while (1) begin
        timestamp <= timestamp + 1;
        @(posedge clk_i);
    end
end

//
// Read expected values file
//
integer ignore[{{ header|length*3 }}:0];
integer data_in[{{ header|length-1 }}:0];
reg is_file_end=0;

initial begin
{% for field in header %}
    {% if not loop.first %}
    {{ field }} = 0;
    {% endif %}
{% endfor %}

    @(posedge clk_i);
    fid=$fopen("{{number}}{{block.entity}}expected.csv","r");
    // Read and ignore description field    
    
    r=$fgets(ignore, fid);
    //r=$fscanf(fid,"{{ " ".join(("%s",)*header|length)}}\n",    
{% set datalist=[] %}
{% for i in range(header|length)|reverse %}
    {%do datalist.append("        data_in[" + i|string + "]") %}
{% endfor %}
{# {{",\n".join(datalist)}} #}
//    );
    while (!$feof(fid)) begin
    	r=$fscanf(fid,"{{ " ".join(("%d",)*header|length)}}\n", 
    {{",\n    ".join(datalist)}}
        );
{% for field in header %}
	{% if loop.first %}
        wait (timestamp == data_in[{{loop.revindex0}}]) begin
	{% else %}
            	{{ field }} <= data_in[{{loop.revindex0}}];
    {% endif %}
{% endfor %}
        end
        @(posedge clk_i);
    end    
    repeat(100) @(posedge clk_i);
    is_file_end = 1;
end

//
// ERROR DETECTION:
// Compare Block Outputs and Expected Outputs.
//
always @(posedge clk_i)
begin
    if (~is_file_end) begin
    // If not equal, display an error.
{% for field in block.fields%}
	{% if field in block.filter_fields("bit_out") or field in 
     		block.filter_fields("read") or field in 
       		block.filter_fields("pos_out") or field in 
    	   	block.filter_fields("read enum") or field in
    	   	block.filter_fields("read uint 1023") %}
    	if ({{ field.name }} != {{field.name}}_uut) begin
    	    $display("{{
    	    field.name}} error detected at timestamp %d\n", timestamp);
    	    {{field.name}}_err = 1;
    	    test_result = 1;
        end
	{% endif %}
{% endfor %}
    end
end

// $stop Halts a simulation and enters an interactive debug mode
// $finish Finishes a simulation and exits the simulation process
always @ (posedge clk_i)
begin
    if (is_file_end) begin
        $display("Simulation has finished");
        $finish(2);
    end
end

{% if block.entity == "clocks" %}
// Clocks.vhd expected a reset input, true if a write strobe is 1
{% set wstblist=[] %}
    {% for field in block.fields %}
        {% if field.wstb %}
            {%do wstblist.append(field.name+"_wstb") %}
        {% endif %}
    {% endfor %}
reg 	reset_i;
always @( {{ " or ".join(wstblist) }} )
begin
	reset_i = {{" | ".join(wstblist) }} ;
end
{% endif %}


{% if block.entity == "calc" %}
//Unique case for calc, function needs a delay
reg [1:0]  FUNC_DLY;
always @ (posedge clk_i)
begin
    FUNC_DLY <= FUNC;
end
{% endif %} 

// Instantiate the Unit Under Test (UUT)
{{block.entity}} uut (
		
{% for field in block.fields %}
	{% if field in block.filter_fields("bit_out|pos_out|read enum")%}
	 	.{{ field.name }}_o  		({{field.name}}_uut		),
	{% elif  (field in	 block.filter_fields("read") 
	 or field in block.filter_fields("read uint 1023")) %}
		.{{ field.name }}  		({{field.name}}_uut	 		),
	{% elif field in block.filter_fields("bit_mux|pos_mux") %}
		.{{field.name}}_i   	({{field.name}} ),
		{% if field.wstb %}
		.{{ field.name}}_wstb	({{field.name}}_wstb),
		{% endif %}
	{% else %}
	    {% if field.name == "FUNC" and block.entity == "calc" %}
	    .FUNC           (FUNC_DLY),
	    {%else%}
		.{{field.name}}  		({{field.name}}     ),
		{% endif %}
		{% if field.wstb and block.entity != "clocks" %}
		.{{ field.name}}_wstb	({{field.name}}_wstb),
		{% endif %}
	{% endif %}
{% endfor %}
{% if block.entity == "clocks" %}
		.reset_i	(reset_i	),
{% endif %}
    	.clk_i		(clk_i		)
);

endmodule
